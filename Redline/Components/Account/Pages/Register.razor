@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Redline.Data
@using RedlineLib.Entites

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject RedlineLib.Data.MessageContext Db
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
	<div class="col-md-4">
		<StatusMessage Message="@Message" />
		<EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
			<DataAnnotationsValidator />
			<h2>Create a new account.</h2>
			<hr />
			@* <ValidationSummary class="text-danger" role="alert" /> *@
			<div class="form-floating mb-3">
				<InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
				<label for="email" class="form-label">Email</label>
				<ValidationMessage For="() => Input.Email" class="text-danger" />
			</div>
			<div class="form-floating mb-3">
				<InputText type="password" @bind-Value="Input.Password"
						   class="form-control" autocomplete="new-password"
						   aria-required="true" placeholder="password" />
				<label for="password" class="form-label">Password</label>
				<ValidationMessage For="() => Input.Password" class="text-danger" />
			</div>
			<div class="form-floating mb-3">
				<InputText type="password" @bind-Value="Input.ConfirmPassword"
						   class="form-control" autocomplete="new-password"
						   aria-required="true" placeholder="password" />
				<label for="confirm-password" class="form-label">Confirm Password</label>
				<ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
			</div>
			<button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
		</EditForm>
	</div>
	<div class="col-md-6 col-md-offset-2">
		<section>
			<h3>Use another service to register.</h3>
			<hr />
			<ExternalLoginPicker />
		</section>
	</div>
</div>

@code {
	private IEnumerable<IdentityError>? identityErrors;

	[SupplyParameterFromForm]
	private InputModel Input { get; set; } = new();

	[SupplyParameterFromQuery]
	private string? ReturnUrl { get; set; }

	private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		if (user.Identity?.IsAuthenticated == true)
		{
			// Redirect logged-in users to their profile or home
			NavigationManager.NavigateTo("/profile");
		}
	}

	public async Task RegisterUser(EditContext editContext)
	{
		var user = CreateUser();

		await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
		var emailStore = GetEmailStore();
		await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

		user.EmailConfirmed = true;

		var result = await UserManager.CreateAsync(user, Input.Password);
		ApplicationUser applicationUser = user;

		if (!result.Succeeded)
		{
			identityErrors = result.Errors;
			return;
		}
		else
		{
			var profile = new User
			{
				Id = Guid.NewGuid(),
				ApplicationUserId = applicationUser.Id,
				Email = applicationUser.Email,
				DisplayName = applicationUser.Email, // <-- set initial DisplayName to email
				Age = 0,
				Location = "",
				CurrentCar = "",
				FavoriteCar = "",
				ProfilePictureUrl = ""
			};

			Db.Users.Add(profile);
			await Db.SaveChangesAsync();

			await SignInManager.SignInAsync(applicationUser, isPersistent: false);
			NavigationManager.NavigateTo($"/profile?username={Uri.EscapeDataString(applicationUser.UserName)}");
		}

		Logger.LogInformation("User created a new account with password.");

		var userId = await UserManager.GetUserIdAsync(user);
		var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
		code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
		var callbackUrl = NavigationManager.GetUriWithQueryParameters(
			NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
			new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

		await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

		if (UserManager.Options.SignIn.RequireConfirmedAccount)
		{
			RedirectManager.RedirectTo(
				"Account/RegisterConfirmation",
				new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
		}

		await SignInManager.SignInAsync(user, isPersistent: false);
		RedirectManager.RedirectTo(ReturnUrl);
	}

	private ApplicationUser CreateUser()
	{
		try
		{
			return Activator.CreateInstance<ApplicationUser>();
		}
		catch
		{
			throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
				$"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
		}
	}

	private IUserEmailStore<ApplicationUser> GetEmailStore()
	{
		if (!UserManager.SupportsUserEmail)
		{
			throw new NotSupportedException("The default UI requires a user store with email support.");
		}
		return (IUserEmailStore<ApplicationUser>)UserStore;
	}

	private sealed class InputModel
	{
		[Required]
		[EmailAddress]
		[Display(Name = "Email")]
		public string Email { get; set; } = "";

		[Required]
		// [StringLength(100, ErrorMessage = "The {0} must be at least {2} characters and at max {1} characters long.", MinimumLength = 8)]
		[DataType(DataType.Password)]
		[Display(Name = "Password")]
		[Redline.Models.CustomPassword]
		public string Password { get; set; } = "";

		[DataType(DataType.Password)]
		[Display(Name = "Confirm password")]
		// [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
		[Compare("Password")]
		public string ConfirmPassword { get; set; } = "";
	}
}